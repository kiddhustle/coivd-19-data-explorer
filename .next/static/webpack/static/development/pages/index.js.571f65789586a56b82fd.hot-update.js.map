{"version":3,"file":"static/webpack/static/development/pages/index.js.571f65789586a56b82fd.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport NoSSR from 'react-no-ssr';\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link'\nimport Router, { useRouter } from 'next/router';\nimport useSWR from 'swr';\n// import Plot from 'react-plotly.js';\nimport { Bar, BarChart, Legend,  LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\n\nimport { getChartData, getCountryData, addExtraSeriesData } from '../utils/country'\nimport next from 'next';\n\n// import Plotly from 'plotly.js-dist'\n\nexport const DATA_URL = `https://pomber.github.io/covid19/timeseries.json`\n\nexport function fetcher(url) {\n    return fetch(url).then(r => r.json());\n}\n\nexport default function Index(props) {\n    const [mounted, setMounted] = useState(false);\n    const {dataset} = props\n    // const [dataset, setDataset] = useState({})\n    const { query } = useRouter();\n    // const { data, error } = useSWR(\n    //     `https://pomber.github.io/covid19/timeseries.json`,\n    //     fetcher,\n    //     {\n    //         onError: (err, key, config) => {\n    //             console.log('err', err)\n    //             console.log('key', key)\n    //             console.log('config', config)\n\n    //         },\n    //         onSuccess: (data, key, config) => {\n    //             const newData = {}\n    //             Object.keys(data).forEach((name) => {\n    //                 const country = data[name]\n    //                 newData[name] = country.map((entry) => addExtraSeriesData(entry, name))\n    //             })\n    //             setDataset(newData)\n    //         },\n    //         initialData: {}\n    //     }\n    // );\n\n    const countryNames = Object.keys(dataset)\n    const chartData = getChartData(dataset)\n    // console.log('chartData', chartData)\n\n    return (\n        <Layout>\n            <p>Home page</p>\n            <div>\n                <NoSSR>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                    <BarChart data={chartData} onClick={(e)=> {\n                        if(!e) {return}\n                            const nextUrl = `/countries/${e.activeLabel}`\n                            Router.push(nextUrl)\n                            console.log(`Clicked label: ${nextUrl}`)\n                        }}>\n                        <XAxis dataKey=\"countryName\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\n                        <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n                        <Bar dataKey=\"deaths\" fill=\"#aa0000\" />\n                    </BarChart>\n                </ResponsiveContainer>\n                </NoSSR>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Date</th>\n                        <th>Confirmed</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                        <th>Suffering</th>\n                        <th>Mortality Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {countryNames.map((name) => {\n                        const countrySeries = dataset[name]\n                        const lastEntryIndex = countrySeries.length - 1\n                        const {\n                            date, confirmed, deaths, recovered, suffering, mortalityRate\n                        } = countrySeries[lastEntryIndex]\n\n                        return (<tr key={name}>\n                            <td title=\"country\">\n                                <Link href={`/countries/${name}`}>\n                                    <a>{name}</a>\n                                </Link>\n                                </td>\n                            <td title=\"date\">{date}</td>\n                            <td title=\"confirmed\">{confirmed}</td>\n                            <td title=\"deaths\">{deaths}</td>\n                            <td title=\"recovered\">{recovered}</td>\n                            <td title=\"sufferers (approx)\">{suffering}</td>\n                            <td title=\"mortality rate\">{(mortalityRate * 100).toFixed(2)}%</td>\n                        </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </table>\n\n        </Layout>\n    );\n}\n\nexport async function getStaticProps({ params }) {\n    // Fetch necessary data for the blog post using params.id\n    const res = await axios.get(DATA_URL)\n    const { data } = await res\n\n    const dataset = {}\n    Object.keys(data).forEach((name) => {\n        const country = data[name]\n        dataset[name] = country.map((entry) => addExtraSeriesData(entry, name))\n    })\n    \n    return {\n        props: {\n            dataset\n        }\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAOA;;;;A","sourceRoot":""}