{"ast":null,"code":"var _jsxFileName = \"/Users/boss/workspace/covid-19-explorer/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport Plot from 'react-plotly.js';\nimport { getAggregateData, getCountryData, addExtraSeriesData } from '../utils/country'; // import Plotly from 'plotly.js-dist'\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function Index() {\n  var _this = this;\n\n  var _useState = useState({}),\n      dataset = _useState[0],\n      setDataset = _useState[1];\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useSWR = useSWR(\"https://pomber.github.io/covid19/timeseries.json\", fetcher, {\n    onError: function onError(err, key, config) {\n      console.log('err', err);\n      console.log('key', key);\n      console.log('config', config);\n    },\n    onSuccess: function onSuccess(data, key, config) {\n      var newData = {};\n      Object.keys(data).forEach(function (name) {\n        var country = data[name];\n        newData[name] = country.map(function (entry) {\n          return addExtraSeriesData(entry);\n        });\n      });\n      setDataset(newData);\n    },\n    initialData: {}\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var countryNames = Object.keys(dataset);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Home page\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, __jsx(Plot, {\n    data: [],\n    layout: {\n      width: 320,\n      height: 240,\n      title: 'A Fancy Plot'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  })), __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Country\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, \"Confirmed\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"Deaths\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"Recovered\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Suffering\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, \"Mortality Rate\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, countryNames.map(function (name) {\n    var countrySeries = dataset[name];\n    var lastEntryIndex = countrySeries.length - 1;\n    var _countrySeries$lastEn = countrySeries[lastEntryIndex],\n        date = _countrySeries$lastEn.date,\n        confirmed = _countrySeries$lastEn.confirmed,\n        deaths = _countrySeries$lastEn.deaths,\n        recovered = _countrySeries$lastEn.recovered,\n        suffering = _countrySeries$lastEn.suffering,\n        mortalityrate = _countrySeries$lastEn.mortalityrate;\n    return __jsx(\"tr\", {\n      key: name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }\n    }, __jsx(\"td\", {\n      title: \"country\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, name), __jsx(\"td\", {\n      title: \"date\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, (mortalityrate * 100).toFixed(2), \"%\"));\n  }))));\n}","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/pages/index.js"],"names":["React","useState","Layout","useRouter","useSWR","Plot","getAggregateData","getCountryData","addExtraSeriesData","fetcher","url","fetch","then","r","json","Index","dataset","setDataset","query","onError","err","key","config","console","log","onSuccess","data","newData","Object","keys","forEach","name","country","map","entry","initialData","error","countryNames","width","height","title","countrySeries","lastEntryIndex","length","date","confirmed","deaths","recovered","suffering","mortalityrate","toFixed"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport Plot from 'react-plotly.js';\nimport { getAggregateData, getCountryData, addExtraSeriesData } from '../utils/country'\n\n// import Plotly from 'plotly.js-dist'\n\n\nfunction fetcher(url) {\n    return fetch(url).then(r => r.json());\n}\n\n\nexport default function Index() {\n    const [dataset, setDataset] = useState({})\n    const { query } = useRouter();\n    const { data, error } = useSWR(\n        `https://pomber.github.io/covid19/timeseries.json`,\n        fetcher,\n        {\n            onError: (err, key, config) => {\n                console.log('err', err)\n                console.log('key', key)\n                console.log('config', config)\n\n            },\n            onSuccess: (data, key, config) => {\n                const newData = {}\n                Object.keys(data).forEach((name) => {\n                    const country = data[name]\n                    newData[name] = country.map((entry) => addExtraSeriesData(entry))\n                })\n                setDataset(newData)\n            },\n            initialData: {}\n        }\n    );\n\n    const countryNames = Object.keys(dataset)\n\n\n    return (\n        <Layout>\n            <p>Home page</p>\n            <div>\n                <Plot\n                    data={[]}\n                    layout={{ width: 320, height: 240, title: 'A Fancy Plot' }}\n                />\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Date</th>\n                        <th>Confirmed</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                        <th>Suffering</th>\n                        <th>Mortality Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {countryNames.map((name) => {\n                        const countrySeries = dataset[name]\n                        const lastEntryIndex = countrySeries.length - 1\n                        const {\n                            date, confirmed, deaths, recovered, suffering, mortalityrate\n                        } = countrySeries[lastEntryIndex]\n\n                        return (<tr key={name}>\n                            <td title=\"country\">{name}</td>\n                            <td title=\"date\">{date}</td>\n                            <td title=\"confirmed\">{confirmed}</td>\n                            <td title=\"deaths\">{deaths}</td>\n                            <td title=\"recovered\">{recovered}</td>\n                            <td title=\"sufferers (approx)\">{suffering}</td>\n                            <td title=\"mortality rate\">{(mortalityrate * 100).toFixed(2)}%</td>\n                        </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </table>\n\n        </Layout>\n    );\n}"]},"metadata":{},"sourceType":"module"}