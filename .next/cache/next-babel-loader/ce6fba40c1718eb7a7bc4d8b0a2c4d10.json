{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport NoSSR from 'react-no-ssr';\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport Router, { useRouter } from 'next/router';\nimport useSWR from 'swr'; // import Plot from 'react-plotly.js';\n\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { getChartData, getCountryData, addExtraSeriesData } from '../utils/country';\nimport next from 'next'; // import Plotly from 'plotly.js-dist'\n\nexport const DATA_URL = `https://pomber.github.io/covid19/timeseries.json`;\nexport function fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\nexport default function Index(props) {\n  const {\n    0: mounted,\n    1: setMounted\n  } = useState(false);\n  const {\n    dataset\n  } = props; // const [dataset, setDataset] = useState({})\n\n  const {\n    query\n  } = useRouter(); // const { data, error } = useSWR(\n  //     `https://pomber.github.io/covid19/timeseries.json`,\n  //     fetcher,\n  //     {\n  //         onError: (err, key, config) => {\n  //             console.log('err', err)\n  //             console.log('key', key)\n  //             console.log('config', config)\n  //         },\n  //         onSuccess: (data, key, config) => {\n  //             const newData = {}\n  //             Object.keys(data).forEach((name) => {\n  //                 const country = data[name]\n  //                 newData[name] = country.map((entry) => addExtraSeriesData(entry, name))\n  //             })\n  //             setDataset(newData)\n  //         },\n  //         initialData: {}\n  //     }\n  // );\n\n  const countryNames = Object.keys(dataset);\n  const chartData = getChartData(dataset); // console.log('chartData', chartData)\n\n  return __jsx(Layout, null, __jsx(\"p\", null, \"Home page\"), __jsx(\"div\", null, __jsx(NoSSR, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400\n  }, __jsx(BarChart, {\n    data: chartData,\n    onClick: e => {\n      if (!e) {\n        return;\n      }\n\n      const nextUrl = `/countries/${e.activeLabel}`;\n      Router.push(nextUrl);\n      console.log(`Clicked label: ${nextUrl}`);\n    }\n  }, __jsx(XAxis, {\n    dataKey: \"countryName\"\n  }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n    dataKey: \"confirmed\",\n    fill: \"#8884d8\"\n  }), __jsx(Bar, {\n    dataKey: \"recovered\",\n    fill: \"#82ca9d\"\n  }), __jsx(Bar, {\n    dataKey: \"deaths\",\n    fill: \"#aa0000\"\n  }))))), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Country\"), __jsx(\"th\", null, \"Date\"), __jsx(\"th\", null, \"Confirmed\"), __jsx(\"th\", null, \"Deaths\"), __jsx(\"th\", null, \"Recovered\"), __jsx(\"th\", null, \"Suffering\"), __jsx(\"th\", null, \"Mortality Rate\"))), __jsx(\"tbody\", null, countryNames.map(name => {\n    const countrySeries = dataset[name];\n    const lastEntryIndex = countrySeries.length - 1;\n    const {\n      date,\n      confirmed,\n      deaths,\n      recovered,\n      suffering,\n      mortalityRate\n    } = countrySeries[lastEntryIndex];\n    return __jsx(\"tr\", {\n      key: name\n    }, __jsx(\"td\", {\n      title: \"country\"\n    }, __jsx(Link, {\n      href: `/countries/${name}`\n    }, __jsx(\"a\", null, name))), __jsx(\"td\", {\n      title: \"date\"\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\"\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\"\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\"\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\"\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\"\n    }, (mortalityRate * 100).toFixed(2), \"%\"));\n  }))));\n}\nexport async function getStaticProps({\n  params\n}) {\n  // Fetch necessary data for the blog post using params.id\n  const res = await axios.get(DATA_URL);\n  const {\n    data\n  } = await res;\n  const dataset = {};\n  Object.keys(data).forEach(name => {\n    const country = data[name];\n    dataset[name] = country.map(entry => addExtraSeriesData(entry, name));\n  });\n  return {\n    props: {\n      dataset\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}