{"ast":null,"code":"var _jsxFileName = \"/Users/boss/workspace/covid-19-explorer/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr'; // import Plotly from 'plotly.js-dist'\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function Index() {\n  const {\n    query\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`https://pomber.github.io/covid19/timeseries.json`, fetcher, {\n    onError: (err, key, config) => {\n      console.log('err', err);\n      console.log('key', key);\n      console.log('config', config);\n    },\n    initialData: {}\n  });\n  console.log('error', data);\n  console.log('data', data);\n  const countryNames = Object.keys(data);\n\n  const getCountryData = countrySeries => {\n    if (!countrySeries) {\n      return {};\n    }\n\n    const out = {\n      date: null,\n      confirmed: 0,\n      recovered: 0,\n      deaths: 0,\n      suffering: 0,\n      mortalityrate: 0\n    };\n    countrySeries.forEach((val, i, arr) => {\n      out.date = val.date;\n      out.confirmed += val.confirmed;\n      out.recovered += val.recovered;\n      out.deaths += val.deaths;\n    });\n    out.suffering = out.confirmed - (out.deaths + out.recovered);\n    out.mortalityrate = out.deaths / out.confirmed;\n    return out;\n  };\n\n  const getAggregateData = () => {\n    const out = {};\n    Object.keys(data).forEach(name => {\n      out[name] = getCountryData(name);\n    });\n    return out;\n  };\n\n  const aggregateData = getAggregateData();\n  console.log('aggregateData', aggregateData); // const map = data ? ()\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Home page\"), __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Country\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"Confirmed\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Deaths\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, \"Recovered\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, \"Suffering\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, \"Mortality Rate\")), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, countryNames.map(name => {\n    const country = getCountryData(data[name]);\n    return __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }, __jsx(\"td\", {\n      title: \"country\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, name), __jsx(\"td\", {\n      title: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, country.date), __jsx(\"td\", {\n      title: \"confirmed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }, country.confirmed), __jsx(\"td\", {\n      title: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }\n    }, country.deaths), __jsx(\"td\", {\n      title: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, country.recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, country.suffering), __jsx(\"td\", {\n      title: \"mortality rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, (country.mortalityrate * 100).toFixed(2), \"%\"));\n  }))));\n}","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/pages/index.js"],"names":["Layout","useRouter","useSWR","fetcher","url","fetch","then","r","json","Index","query","data","error","onError","err","key","config","console","log","initialData","countryNames","Object","keys","getCountryData","countrySeries","out","date","confirmed","recovered","deaths","suffering","mortalityrate","forEach","val","i","arr","getAggregateData","name","aggregateData","map","country","toFixed"],"mappings":"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","sourcesContent":["import Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\n\n// import Plotly from 'plotly.js-dist'\n\n\nfunction fetcher(url) {\n    return fetch(url).then(r => r.json());\n}\n\n\nexport default function Index() {\n    const { query } = useRouter();\n    const { data, error } = useSWR(\n        `https://pomber.github.io/covid19/timeseries.json`,\n        fetcher,\n        {\n            onError: (err, key, config) => {\n                console.log('err', err)\n                console.log('key', key)\n                console.log('config', config)\n                \n            },\n            initialData: {}\n        }\n    );\n    console.log('error', data)\n    console.log('data', data)\n    \n    const countryNames = Object.keys(data)\n    const getCountryData = (countrySeries) => {\n\n        if (!countrySeries) {\n            return {}\n        }\n        const out = {\n            date: null, \n            confirmed: 0,\n            recovered: 0,\n            deaths: 0,\n            suffering: 0,\n            mortalityrate: 0\n        }\n\n        countrySeries.forEach((val, i, arr) =>{\n            out.date = val.date\n            out.confirmed += val.confirmed\n            out.recovered += val.recovered\n            out.deaths += val.deaths\n        })\n\n        out.suffering = out.confirmed - (out.deaths + out.recovered)\n        out.mortalityrate = out.deaths / out.confirmed\n\n        return out;\n    }\n\n    const getAggregateData = () => {\n        \n        const out = {}\n        Object.keys(data).forEach((name) => {\n            out[name] = getCountryData(name)\n        })\n        return out\n    }\n\n    const aggregateData = getAggregateData()\n    console.log('aggregateData', aggregateData)\n    // const map = data ? ()\n    return (\n        <Layout>\n            <p>Home page</p>\n            <table>\n                <thead>\n                    <th>Country</th>\n                    <th>Date</th>\n                    <th>Confirmed</th>\n                    <th>Deaths</th>\n                    <th>Recovered</th>\n                    <th>Suffering</th>\n                    <th>Mortality Rate</th>\n                </thead>\n                <tbody>\n                    {countryNames.map((name) => {\n                        const country = getCountryData(data[name])\n                        return (<tr>\n                            <td title=\"country\">{name}</td>\n                            <td title=\"date\">{country.date}</td>\n                            <td title=\"confirmed\">{country.confirmed}</td>\n                            <td title=\"deaths\">{country.deaths}</td>\n                            <td title=\"recovered\">{country.recovered}</td>\n                            <td title=\"sufferers (approx)\">{country.suffering}</td>\n                            <td title=\"mortality rate\">{(country.mortalityrate * 100).toFixed(2)}%</td>\n                        </tr>\n                    )\n                })\n            }\n                    \n                </tbody>\n            </table>\n            \n        </Layout>\n    );\n}"]},"metadata":{},"sourceType":"module"}