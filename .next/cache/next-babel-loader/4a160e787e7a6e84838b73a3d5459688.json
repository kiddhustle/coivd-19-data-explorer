{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/boss/workspace/covid-19-explorer/pages/countries/[countryName].js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport NoSSR from 'react-no-ssr';\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Layout from '../../components/MyLayout';\nimport { getChartData, getCountryData, addExtraSeriesData } from '../../utils/country';\nimport { fetcher } from '../index';\nexport default (function () {\n  var router = useRouter();\n  var countryName = router.query.countryName;\n\n  var _useState = useState([]),\n      countryDataset = _useState[0],\n      setCountryDataset = _useState[1];\n\n  var _useSWR = useSWR(\"https://pomber.github.io/covid19/timeseries.json\", fetcher, {\n    onError: function onError(err, key, config) {\n      console.log('err', err);\n      console.log('key', key);\n      console.log('config', config);\n    },\n    onSuccess: function onSuccess(data, key, config) {\n      var newData = [];\n      var dataset = data[countryName];\n      console.log('countryName', countryName);\n      console.log('dataset', dataset);\n      newData = addExtraSeriesData(dataset, countryName);\n      console.log('newData', newData);\n      setCountryDataset(newData);\n    },\n    initialData: {}\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, router.query.countryName), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, __jsx(NoSSR, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, __jsx(LineChart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  })))), __jsx(\"table\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }, \"Country\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"Confirmed\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, \"Deaths\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, \"Recovered\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Suffering\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Mortality Rate\"))), __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, countryDataset.map(function (data) {\n    var countryName = data.countryName,\n        date = data.date,\n        confirmed = data.confirmed,\n        deaths = data.deaths,\n        recovered = data.recovered,\n        suffering = data.suffering,\n        mortalityRate = data.mortalityRate;\n    return __jsx(\"tr\", {\n      key: countryName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }\n    }, __jsx(\"td\", {\n      title: \"country\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    }, countryName), __jsx(\"td\", {\n      title: \"date\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, (mortalityRate * 100).toFixed(2), \"%\"));\n  }))));\n}); // export async function getStaticPaths() {\n//     // Return a list of possible value for id\n// }\n// export async function getStaticProps({ params }) {\n//     // Fetch necessary data for the blog post using params.id\n// }","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/pages/countries/[countryName].js"],"names":["React","useState","useEffect","useRouter","useSWR","NoSSR","Bar","BarChart","Legend","LineChart","Line","ResponsiveContainer","Tooltip","XAxis","YAxis","Layout","getChartData","getCountryData","addExtraSeriesData","fetcher","router","countryName","query","countryDataset","setCountryDataset","onError","err","key","config","console","log","onSuccess","data","newData","dataset","initialData","error","map","date","confirmed","deaths","recovered","suffering","mortalityRate","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport useSWR from 'swr';\nimport NoSSR from 'react-no-ssr';\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Layout from '../../components/MyLayout'\nimport { getChartData, getCountryData, addExtraSeriesData } from '../../utils/country'\nimport {fetcher} from '../index'\n\nexport default () => {\n    const router = useRouter();\n    const {countryName} = router.query\n    const [countryDataset, setCountryDataset] = useState([])\n    const { data, error } = useSWR(\n        `https://pomber.github.io/covid19/timeseries.json`,\n        fetcher,\n        {\n            onError: (err, key, config) => {\n                console.log('err', err)\n                console.log('key', key)\n                console.log('config', config)\n\n            },\n            onSuccess: (data, key, config) => {\n                let newData = []\n                const dataset = data[countryName]\n                console.log('countryName', countryName)\n\n                console.log('dataset', dataset)\n                newData = addExtraSeriesData(dataset, countryName)\n                console.log('newData', newData)\n                setCountryDataset(newData)\n            },\n            initialData: {}\n        }\n    );\n    return (\n        <Layout>\n            <h1>{router.query.countryName}</h1>\n            <div>\n                <NoSSR>\n                    <ResponsiveContainer width=\"100%\" height={400}>\n                        <LineChart></LineChart>\n                    </ResponsiveContainer>\n                </NoSSR>\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Date</th>\n                        <th>Confirmed</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                        <th>Suffering</th>\n                        <th>Mortality Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {countryDataset.map((data) => {\n                        const {\n                            countryName, date, confirmed, deaths,\n                            recovered, suffering, mortalityRate\n                        } = data\n\n                        return (<tr key={countryName}>\n                            <td title=\"country\">{countryName}</td>\n                            <td title=\"date\">{date}</td>\n                            <td title=\"confirmed\">{confirmed}</td>\n                            <td title=\"deaths\">{deaths}</td>\n                            <td title=\"recovered\">{recovered}</td>\n                            <td title=\"sufferers (approx)\">{suffering}</td>\n                            <td title=\"mortality rate\">{(mortalityRate * 100).toFixed(2)}%</td>\n                        </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </table>\n        </Layout>\n    );\n};\n\n// export async function getStaticPaths() {\n//     // Return a list of possible value for id\n// }\n\n// export async function getStaticProps({ params }) {\n//     // Fetch necessary data for the blog post using params.id\n// }\n"]},"metadata":{},"sourceType":"module"}