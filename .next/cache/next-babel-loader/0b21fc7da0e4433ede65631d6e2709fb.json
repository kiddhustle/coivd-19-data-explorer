{"ast":null,"code":"var _jsxFileName = \"/Users/boss/workspace/covid-19-explorer/pages/countries/[countryName].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport NoSSR from 'react-no-ssr';\nimport axios from 'axios';\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Layout from '../../components/MyLayout';\nimport { getChartData, getCountryData, addExtraSeriesData } from '../../utils/country';\nimport { fetcher } from '../index';\nexport const DATA_URL = `https://pomber.github.io/covid19/timeseries.json`;\nexport default (() => {\n  const router = useRouter();\n  const {\n    countryName\n  } = router.query;\n  const {\n    0: countryDataset,\n    1: setCountryDataset\n  } = useState([]);\n  console.log('countryName', countryName);\n  const {\n    data,\n    error\n  } = useSWR(DATA_URL, fetcher, {\n    onError: (err, key, config) => {\n      console.log('err', err);\n      console.log('key', key);\n      console.log('config', config);\n    },\n    onSuccess: (data, key, config) => {\n      console.log('data', data);\n      console.log('countryName', countryName);\n      const country = data[countryName];\n      const dataset = country.map(entry => addExtraSeriesData(entry, countryName));\n      setCountryDataset(dataset);\n    },\n    initialData: {}\n  });\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, router.query.countryName), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(NoSSR, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, __jsx(LineChart, {\n    data: countryDataset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, __jsx(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }), __jsx(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }\n  }), __jsx(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }), __jsx(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }), __jsx(Line, {\n    dataKey: \"confirmed\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }), __jsx(Line, {\n    Bar: true,\n    dataKey: \"recovered\",\n    fill: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }), __jsx(Line, {\n    dataKey: \"deaths\",\n    fill: \"#aa0000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }\n  }))))), __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Confirmed\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, \"Deaths\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, \"Recovered\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Suffering\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \"Mortality Rate\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, countryDataset.map(data => {\n    const {\n      countryName,\n      date,\n      confirmed,\n      deaths,\n      recovered,\n      suffering,\n      mortalityRate\n    } = data;\n    return __jsx(\"tr\", {\n      key: date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, __jsx(\"td\", {\n      title: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, (mortalityRate * 100).toFixed(2), \"%\"));\n  }))));\n});\nexport async function getStaticPaths(context) {\n  // Return a list of possible value for id\n  try {\n    const res = await axios.get(DATA_URL);\n    const {\n      data\n    } = await res;\n    console.log('data', data);\n    const paths = {\n      paths: Object.keys(data).map(countryName => ({\n        params: {\n          countryName\n        }\n      }))\n    };\n    console.log('paths', paths);\n    return {\n      paths,\n      fallback: false\n    };\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n}\nexport async function getStaticProps({\n  params\n}) {\n  // Fetch necessary data for the blog post using params.id\n  const res = await axios.get(DATA_URL);\n  const {\n    data\n  } = await res;\n  const {\n    countryName\n  } = params;\n  const country = data[countryName];\n  const dataset = country.map(entry => addExtraSeriesData(entry, countryName));\n  return {\n    props: {\n      countryDataset: dataset\n    }\n  };\n}","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/pages/countries/[countryName].js"],"names":["React","useState","useEffect","useRouter","useSWR","NoSSR","axios","Bar","BarChart","Legend","LineChart","Line","ResponsiveContainer","Tooltip","XAxis","YAxis","Layout","getChartData","getCountryData","addExtraSeriesData","fetcher","DATA_URL","router","countryName","query","countryDataset","setCountryDataset","console","log","data","error","onError","err","key","config","onSuccess","country","dataset","map","entry","initialData","date","confirmed","deaths","recovered","suffering","mortalityRate","toFixed","getStaticPaths","context","res","get","paths","Object","keys","params","fallback","getStaticProps","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport useSWR from 'swr';\nimport NoSSR from 'react-no-ssr';\nimport axios from 'axios'\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Layout from '../../components/MyLayout'\nimport { getChartData, getCountryData, addExtraSeriesData } from '../../utils/country'\nimport {fetcher} from '../index'\n\nexport const DATA_URL = `https://pomber.github.io/covid19/timeseries.json`\n\nexport default () => {\n    const router = useRouter();\n    const {countryName} = router.query\n    const [countryDataset, setCountryDataset] = useState([])\n    console.log('countryName', countryName)\n    const { data, error } = useSWR(\n        DATA_URL,\n        fetcher,\n        {\n            onError: (err, key, config) => {\n                console.log('err', err)\n                console.log('key', key)\n                console.log('config', config)\n\n            },\n            onSuccess: (data, key, config) => {\n                console.log('data', data)\n                console.log('countryName', countryName)\n                const country = data[countryName]\n                const dataset = country.map((entry) => addExtraSeriesData(entry, countryName))\n                setCountryDataset(dataset)\n            },\n            initialData: {}\n        }\n    );\n    return (\n        <Layout>\n            <h1>{router.query.countryName}</h1>\n            <div>\n                <NoSSR>\n                    <ResponsiveContainer width=\"100%\" height={400}>\n                        <LineChart data={countryDataset}>\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Line dataKey=\"confirmed\" fill=\"#8884d8\" />\n                            <Line Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n                            <Line dataKey=\"deaths\" fill=\"#aa0000\" />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </NoSSR>\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Confirmed</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                        <th>Suffering</th>\n                        <th>Mortality Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {countryDataset.map((data) => {\n                        const {\n                            countryName, date, confirmed, deaths,\n                            recovered, suffering, mortalityRate\n                        } = data\n\n                        return (<tr key={date}>\n                            <td title=\"date\">{date}</td>\n                            <td title=\"confirmed\">{confirmed}</td>\n                            <td title=\"deaths\">{deaths}</td>\n                            <td title=\"recovered\">{recovered}</td>\n                            <td title=\"sufferers (approx)\">{suffering}</td>\n                            <td title=\"mortality rate\">{(mortalityRate * 100).toFixed(2)}%</td>\n                        </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </table>\n        </Layout>\n    );\n};\n\nexport async function getStaticPaths(context) {\n    // Return a list of possible value for id\n    try {\n        const res = await axios.get(DATA_URL)\n        const {data} = await res\n        console.log('data', data)\n        const paths = {\n            paths: Object.keys(data).map((countryName) => ({\n                params: {\n                    countryName,\n                }\n            }))\n        }\n\n        console.log('paths', paths)\n\n        return {paths, fallback: false}\n    } catch (err) {\n        console.log(err)\n        throw err\n    }\n    \n}\n\nexport async function getStaticProps({ params }) {\n    // Fetch necessary data for the blog post using params.id\n    const res = await axios.get(DATA_URL)\n    const {data} = await res\n    const {countryName} = params\n    const country = data[countryName]\n    const dataset = country.map((entry) => addExtraSeriesData(entry, countryName))\n    return {\n        props: {\n            countryDataset: dataset\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}