{"ast":null,"code":"var _jsxFileName = \"/Users/boss/workspace/covid-19-explorer/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport NoSSR from 'react-no-ssr';\nimport Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr'; // import Plot from 'react-plotly.js';\n\nimport { BarChart, LineChart, Line, ResponsiveContainer, XAxis, YAxis } from 'recharts';\nimport { getAggregateData, getCountryData, addExtraSeriesData } from '../utils/country'; // import Plotly from 'plotly.js-dist'\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function Index() {\n  const {\n    0: mounted,\n    1: setMounted\n  } = useState(false);\n  const {\n    0: dataset,\n    1: setDataset\n  } = useState({});\n  const {\n    query\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`https://pomber.github.io/covid19/timeseries.json`, fetcher, {\n    onError: (err, key, config) => {\n      console.log('err', err);\n      console.log('key', key);\n      console.log('config', config);\n    },\n    onSuccess: (data, key, config) => {\n      const newData = {};\n      Object.keys(data).forEach(name => {\n        const country = data[name];\n        newData[name] = country.map(entry => addExtraSeriesData(entry));\n      });\n      setDataset(newData);\n    },\n    initialData: {}\n  });\n  const countryNames = Object.keys(dataset);\n  const chartData = [{\n    name: 'Page A',\n    uv: 400,\n    pv: 2400,\n    amt: 2400\n  }];\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Home page\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(NoSSR, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, __jsx(LineChart, {\n    width: 400,\n    height: 400,\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"uv\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  })))), __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Country\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, \"Confirmed\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Deaths\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \"Recovered\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, \"Suffering\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, \"Mortality Rate\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, countryNames.map(name => {\n    const countrySeries = dataset[name];\n    const lastEntryIndex = countrySeries.length - 1;\n    const {\n      date,\n      confirmed,\n      deaths,\n      recovered,\n      suffering,\n      mortalityrate\n    } = countrySeries[lastEntryIndex];\n    return __jsx(\"tr\", {\n      key: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, __jsx(\"td\", {\n      title: \"country\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, name), __jsx(\"td\", {\n      title: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, (mortalityrate * 100).toFixed(2), \"%\"));\n  }))));\n}","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/pages/index.js"],"names":["React","useState","useEffect","NoSSR","Layout","useRouter","useSWR","BarChart","LineChart","Line","ResponsiveContainer","XAxis","YAxis","getAggregateData","getCountryData","addExtraSeriesData","fetcher","url","fetch","then","r","json","Index","mounted","setMounted","dataset","setDataset","query","data","error","onError","err","key","config","console","log","onSuccess","newData","Object","keys","forEach","name","country","map","entry","initialData","countryNames","chartData","uv","pv","amt","countrySeries","lastEntryIndex","length","date","confirmed","deaths","recovered","suffering","mortalityrate","toFixed"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport NoSSR from 'react-no-ssr';\nimport Layout from '../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\n// import Plot from 'react-plotly.js';\nimport { BarChart, LineChart, Line, ResponsiveContainer, XAxis, YAxis } from 'recharts';\n\nimport { getAggregateData, getCountryData, addExtraSeriesData } from '../utils/country'\n\n// import Plotly from 'plotly.js-dist'\n\n\nfunction fetcher(url) {\n    return fetch(url).then(r => r.json());\n}\n\n\nexport default function Index() {\n    const [mounted, setMounted] = useState(false);\n    const [dataset, setDataset] = useState({})\n    const { query } = useRouter();\n    const { data, error } = useSWR(\n        `https://pomber.github.io/covid19/timeseries.json`,\n        fetcher,\n        {\n            onError: (err, key, config) => {\n                console.log('err', err)\n                console.log('key', key)\n                console.log('config', config)\n\n            },\n            onSuccess: (data, key, config) => {\n                const newData = {}\n                Object.keys(data).forEach((name) => {\n                    const country = data[name]\n                    newData[name] = country.map((entry) => addExtraSeriesData(entry))\n                })\n                setDataset(newData)\n            },\n            initialData: {}\n        }\n    );\n\n    const countryNames = Object.keys(dataset)\n    const chartData = [{ name: 'Page A', uv: 400, pv: 2400, amt: 2400 }]\n\n    return (\n        <Layout>\n            <p>Home page</p>\n            <div>\n                <NoSSR>\n                    <LineChart width={400} height={400} data={chartData}>\n                        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                    </LineChart>\n                </NoSSR>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Date</th>\n                        <th>Confirmed</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                        <th>Suffering</th>\n                        <th>Mortality Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {countryNames.map((name) => {\n                        const countrySeries = dataset[name]\n                        const lastEntryIndex = countrySeries.length - 1\n                        const {\n                            date, confirmed, deaths, recovered, suffering, mortalityrate\n                        } = countrySeries[lastEntryIndex]\n\n                        return (<tr key={name}>\n                            <td title=\"country\">{name}</td>\n                            <td title=\"date\">{date}</td>\n                            <td title=\"confirmed\">{confirmed}</td>\n                            <td title=\"deaths\">{deaths}</td>\n                            <td title=\"recovered\">{recovered}</td>\n                            <td title=\"sufferers (approx)\">{suffering}</td>\n                            <td title=\"mortality rate\">{(mortalityrate * 100).toFixed(2)}%</td>\n                        </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </table>\n\n        </Layout>\n    );\n}"]},"metadata":{},"sourceType":"module"}