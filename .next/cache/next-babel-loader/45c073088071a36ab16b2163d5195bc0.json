{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var getCountryData = function getCountryData(countrySeries) {\n  if (!countrySeries) {\n    return {};\n  }\n\n  var out = {\n    date: null,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    suffering: 0,\n    mortalityrate: 0\n  };\n  countrySeries.forEach(function (val, i, arr) {\n    out.date = val.date;\n    out.confirmed += parseInt(val.confirmed);\n    out.recovered += parseInt(val.recovered);\n    out.deaths += parseInt(val.deaths);\n  });\n  out.suffering = out.confirmed - (out.deaths + out.recovered);\n  out.mortalityrate = out.deaths / out.confirmed;\n  return out;\n};\nexport var addExtraSeriesData = function addExtraSeriesData(entry, countryName) {\n  var confirmed = entry.confirmed,\n      deaths = entry.deaths,\n      recovered = entry.recovered;\n  return _objectSpread({}, entry, {\n    countryName: countryName,\n    mortalityRate: deaths === 0 || confirmed === 0 ? 0 : deaths / confirmed,\n    suffering: confirmed - (deaths + recovered)\n  });\n};\nexport var getAggregateData = function getAggregateData(countryData) {\n  if (countryData == undefined) {\n    return {};\n  }\n\n  var out = {};\n  Object.keys(countryData).forEach(function (name) {\n    out[name] = getCountryData(countryData[name]);\n  });\n  return out;\n};\nexport var getChartData = function getChartData(dataset) {\n  var keys = Object.keys(dataset);\n  console.log('keys', keys);\n  console.log('dataset', dataset);\n  return keys.map(function (countryName) {\n    var countryData = dataset[countryName];\n    var lastEntryIndex = countryData.length - 1;\n    return countryData[lastEntryIndex];\n  });\n};\nexport default {\n  getCountryData: getCountryData,\n  getAggregateData: getAggregateData,\n  addExtraSeriesData: addExtraSeriesData,\n  getChartData: getChartData\n};","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/utils/country.js"],"names":["getCountryData","countrySeries","out","date","confirmed","recovered","deaths","suffering","mortalityrate","forEach","val","i","arr","parseInt","addExtraSeriesData","entry","countryName","mortalityRate","getAggregateData","countryData","undefined","Object","keys","name","getChartData","dataset","console","log","map","lastEntryIndex","length"],"mappings":"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","sourcesContent":["export const getCountryData = (countrySeries) => {\n\n    if (!countrySeries) {\n        return {}\n    }\n    const out = {\n        date: null,\n        confirmed: 0,\n        recovered: 0,\n        deaths: 0,\n        suffering: 0,\n        mortalityrate: 0\n    }\n\n    countrySeries.forEach((val, i, arr) => {\n        out.date = val.date\n        out.confirmed += parseInt(val.confirmed)\n        out.recovered += parseInt(val.recovered)\n        out.deaths += parseInt(val.deaths)\n    })\n\n    out.suffering = out.confirmed - (out.deaths + out.recovered)\n    out.mortalityrate = out.deaths / out.confirmed\n\n    return out;\n}\n\nexport const addExtraSeriesData = (entry, countryName) => {\n    const { confirmed, deaths, recovered} = entry\n    return {\n        ...entry,\n        countryName,\n        mortalityRate: (deaths === 0 || confirmed === 0) ? 0 : deaths / confirmed,\n        suffering: confirmed - (deaths + recovered)\n    }\n}\nexport const getAggregateData = (countryData) => {\n    if (countryData == undefined) { return {} }\n    const out = {}\n    Object.keys(countryData).forEach((name) => {\n        out[name] = getCountryData(countryData[name])\n    })\n    return out\n}\n\nexport const getChartData = (dataset) => {\n    const keys = Object.keys(dataset)\n    console.log('keys', keys)\n    console.log('dataset', dataset)\n    \n    return keys.map((countryName) => {\n        const countryData = dataset[countryName]\n        const lastEntryIndex = countryData.length - 1\n        return countryData[lastEntryIndex]\n    })\n}\n\nexport default {\n    getCountryData,\n    getAggregateData,\n    addExtraSeriesData,\n    getChartData\n}"]},"metadata":{},"sourceType":"module"}