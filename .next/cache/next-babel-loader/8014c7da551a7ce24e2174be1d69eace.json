{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport NoSSR from 'react-no-ssr';\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport Router, { useRouter } from 'next/router';\nimport useSWR from 'swr'; // import Plot from 'react-plotly.js';\n\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { getChartData, getCountryData } from '../utils/country';\nimport next from 'next'; // import Plotly from 'plotly.js-dist'\n\nexport var __N_SSG = true;\nexport var DATA_URL = \"https://pomber.github.io/covid19/timeseries.json\";\nexport function fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\nexport default function Index(props) {\n  var _useState = useState(false),\n      mounted = _useState[0],\n      setMounted = _useState[1];\n\n  var dataset = props.dataset; // const [dataset, setDataset] = useState({})\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query; // const { data, error } = useSWR(\n  //     `https://pomber.github.io/covid19/timeseries.json`,\n  //     fetcher,\n  //     {\n  //         onError: (err, key, config) => {\n  //             console.log('err', err)\n  //             console.log('key', key)\n  //             console.log('config', config)\n  //         },\n  //         onSuccess: (data, key, config) => {\n  //             const newData = {}\n  //             Object.keys(data).forEach((name) => {\n  //                 const country = data[name]\n  //                 newData[name] = country.map((entry) => addExtraSeriesData(entry, name))\n  //             })\n  //             setDataset(newData)\n  //         },\n  //         initialData: {}\n  //     }\n  // );\n\n\n  var countryNames = Object.keys(dataset);\n  var chartData = getChartData(dataset); // console.log('chartData', chartData)\n\n  return __jsx(Layout, null, __jsx(\"p\", null, \"Home page\"), __jsx(\"div\", null, __jsx(NoSSR, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400\n  }, __jsx(BarChart, {\n    data: chartData,\n    onClick: function onClick(e) {\n      if (!e) {\n        return;\n      }\n\n      var nextUrl = \"/countries/\".concat(e.activeLabel);\n      Router.push(nextUrl);\n      console.log(\"Clicked label: \".concat(nextUrl));\n    }\n  }, __jsx(XAxis, {\n    dataKey: \"countryName\"\n  }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n    dataKey: \"confirmed\",\n    fill: \"#8884d8\"\n  }), __jsx(Bar, {\n    dataKey: \"recovered\",\n    fill: \"#82ca9d\"\n  }), __jsx(Bar, {\n    dataKey: \"deaths\",\n    fill: \"#aa0000\"\n  }))))), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Country\"), __jsx(\"th\", null, \"Date\"), __jsx(\"th\", null, \"Confirmed\"), __jsx(\"th\", null, \"Deaths\"), __jsx(\"th\", null, \"Recovered\"), __jsx(\"th\", null, \"Suffering\"), __jsx(\"th\", null, \"Mortality Rate\"))), __jsx(\"tbody\", null, countryNames.map(function (name) {\n    var countrySeries = dataset[name];\n    var lastEntryIndex = countrySeries.length - 1;\n    var _countrySeries$lastEn = countrySeries[lastEntryIndex],\n        date = _countrySeries$lastEn.date,\n        confirmed = _countrySeries$lastEn.confirmed,\n        deaths = _countrySeries$lastEn.deaths,\n        recovered = _countrySeries$lastEn.recovered,\n        suffering = _countrySeries$lastEn.suffering,\n        mortalityRate = _countrySeries$lastEn.mortalityRate;\n    return __jsx(\"tr\", {\n      key: name\n    }, __jsx(\"td\", {\n      title: \"country\"\n    }, __jsx(Link, {\n      href: \"/countries/\".concat(name)\n    }, __jsx(\"a\", null, name))), __jsx(\"td\", {\n      title: \"date\"\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\"\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\"\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\"\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\"\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\"\n    }, (mortalityRate * 100).toFixed(2), \"%\"));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}