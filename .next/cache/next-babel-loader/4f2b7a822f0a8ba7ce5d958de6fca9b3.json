{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getCountryData = countrySeries => {\n  if (!countrySeries) {\n    return {};\n  }\n\n  const out = {\n    date: null,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    suffering: 0,\n    mortalityrate: 0\n  };\n  countrySeries.forEach((val, i, arr) => {\n    out.date = val.date;\n    out.confirmed += parseInt(val.confirmed);\n    out.recovered += parseInt(val.recovered);\n    out.deaths += parseInt(val.deaths);\n  });\n  out.suffering = out.confirmed - (out.deaths + out.recovered);\n  out.mortalityrate = out.deaths / out.confirmed;\n  return out;\n};\nexport const addExtraSeriesData = (entry, countryName) => {\n  const {\n    confirmed,\n    deaths,\n    recovered\n  } = entry;\n  return _objectSpread({}, entry, {\n    countryName,\n    mortalityRate: deaths / confirmed,\n    suffering: confirmed - (deaths + recovered)\n  });\n};\nexport const getAggregateData = countryData => {\n  if (countryData == undefined) {\n    return {};\n  }\n\n  const out = {};\n  Object.keys(countryData).forEach(name => {\n    out[name] = getCountryData(countryData[name]);\n  });\n  return out;\n};\nexport default {\n  getCountryData,\n  getAggregateData,\n  addExtraSeriesData\n};","map":{"version":3,"sources":["/Users/boss/workspace/covid-19-explorer/utils/country.js"],"names":["getCountryData","countrySeries","out","date","confirmed","recovered","deaths","suffering","mortalityrate","forEach","val","i","arr","parseInt","addExtraSeriesData","entry","countryName","mortalityRate","getAggregateData","countryData","undefined","Object","keys","name"],"mappings":";;;;;;AAAA,OAAO,MAAMA,cAAc,GAAIC,aAAD,IAAmB;AAE7C,MAAI,CAACA,aAAL,EAAoB;AAChB,WAAO,EAAP;AACH;;AACD,QAAMC,GAAG,GAAG;AACRC,IAAAA,IAAI,EAAE,IADE;AAERC,IAAAA,SAAS,EAAE,CAFH;AAGRC,IAAAA,SAAS,EAAE,CAHH;AAIRC,IAAAA,MAAM,EAAE,CAJA;AAKRC,IAAAA,SAAS,EAAE,CALH;AAMRC,IAAAA,aAAa,EAAE;AANP,GAAZ;AASAP,EAAAA,aAAa,CAACQ,OAAd,CAAsB,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAT,KAAiB;AACnCV,IAAAA,GAAG,CAACC,IAAJ,GAAWO,GAAG,CAACP,IAAf;AACAD,IAAAA,GAAG,CAACE,SAAJ,IAAiBS,QAAQ,CAACH,GAAG,CAACN,SAAL,CAAzB;AACAF,IAAAA,GAAG,CAACG,SAAJ,IAAiBQ,QAAQ,CAACH,GAAG,CAACL,SAAL,CAAzB;AACAH,IAAAA,GAAG,CAACI,MAAJ,IAAcO,QAAQ,CAACH,GAAG,CAACJ,MAAL,CAAtB;AACH,GALD;AAOAJ,EAAAA,GAAG,CAACK,SAAJ,GAAgBL,GAAG,CAACE,SAAJ,IAAiBF,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACG,SAAlC,CAAhB;AACAH,EAAAA,GAAG,CAACM,aAAJ,GAAoBN,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACE,SAArC;AAEA,SAAOF,GAAP;AACH,CAzBM;AA2BP,OAAO,MAAMY,kBAAkB,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACtD,QAAM;AAAEZ,IAAAA,SAAF;AAAaE,IAAAA,MAAb;AAAqBD,IAAAA;AAArB,MAAkCU,KAAxC;AACA,2BACOA,KADP;AAEIC,IAAAA,WAFJ;AAGIC,IAAAA,aAAa,EAAEX,MAAM,GAAGF,SAH5B;AAIIG,IAAAA,SAAS,EAAEH,SAAS,IAAIE,MAAM,GAAGD,SAAb;AAJxB;AAMH,CARM;AASP,OAAO,MAAMa,gBAAgB,GAAIC,WAAD,IAAiB;AAC7C,MAAIA,WAAW,IAAIC,SAAnB,EAA8B;AAAE,WAAO,EAAP;AAAW;;AAC3C,QAAMlB,GAAG,GAAG,EAAZ;AACAmB,EAAAA,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBV,OAAzB,CAAkCc,IAAD,IAAU;AACvCrB,IAAAA,GAAG,CAACqB,IAAD,CAAH,GAAYvB,cAAc,CAACmB,WAAW,CAACI,IAAD,CAAZ,CAA1B;AACH,GAFD;AAGA,SAAOrB,GAAP;AACH,CAPM;AASP,eAAe;AACXF,EAAAA,cADW;AAEXkB,EAAAA,gBAFW;AAGXJ,EAAAA;AAHW,CAAf","sourcesContent":["export const getCountryData = (countrySeries) => {\n\n    if (!countrySeries) {\n        return {}\n    }\n    const out = {\n        date: null,\n        confirmed: 0,\n        recovered: 0,\n        deaths: 0,\n        suffering: 0,\n        mortalityrate: 0\n    }\n\n    countrySeries.forEach((val, i, arr) => {\n        out.date = val.date\n        out.confirmed += parseInt(val.confirmed)\n        out.recovered += parseInt(val.recovered)\n        out.deaths += parseInt(val.deaths)\n    })\n\n    out.suffering = out.confirmed - (out.deaths + out.recovered)\n    out.mortalityrate = out.deaths / out.confirmed\n\n    return out;\n}\n\nexport const addExtraSeriesData = (entry, countryName) => {\n    const { confirmed, deaths, recovered} = entry\n    return {\n        ...entry,\n        countryName,\n        mortalityRate: deaths / confirmed,\n        suffering: confirmed - (deaths + recovered)\n    }\n}\nexport const getAggregateData = (countryData) => {\n    if (countryData == undefined) { return {} }\n    const out = {}\n    Object.keys(countryData).forEach((name) => {\n        out[name] = getCountryData(countryData[name])\n    })\n    return out\n}\n\nexport default {\n    getCountryData,\n    getAggregateData,\n    addExtraSeriesData\n}"]},"metadata":{},"sourceType":"module"}