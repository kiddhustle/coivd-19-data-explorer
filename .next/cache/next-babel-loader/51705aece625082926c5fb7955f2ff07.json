{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport NoSSR from 'react-no-ssr';\nimport axios from 'axios';\nimport { Bar, BarChart, Legend, LineChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Layout from '../../components/MyLayout';\nimport { getChartData, getCountryData, addExtraSeriesData } from '../../utils/country';\nimport { fetcher } from '../index';\nexport const DATA_URL = `https://pomber.github.io/covid19/timeseries.json`;\nexport default (props => {\n  const router = useRouter();\n  const {\n    countryName\n  } = router.query;\n  const {\n    countryDataset\n  } = props; // const [countryDataset, setCountryDataset] = useState([])\n  // console.log('countryName', countryName)\n  // const { data, error } = useSWR(\n  //     DATA_URL,\n  //     fetcher,\n  //     {\n  //         onError: (err, key, config) => {\n  //             console.log('err', err)\n  //             console.log('key', key)\n  //             console.log('config', config)\n  //         },\n  //         onSuccess: (data, key, config) => {\n  //             console.log('data', data)\n  //             console.log('countryName', countryName)\n  //             const country = data[countryName]\n  //             const dataset = country.map((entry) => addExtraSeriesData(entry, countryName))\n  //             setCountryDataset(dataset)\n  //         },\n  //         initialData: {}\n  //     }\n  // );\n\n  return __jsx(Layout, null, __jsx(\"h1\", null, router.query.countryName), __jsx(\"div\", null, __jsx(NoSSR, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400\n  }, __jsx(LineChart, {\n    data: countryDataset\n  }, __jsx(XAxis, {\n    dataKey: \"date\"\n  }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Line, {\n    dataKey: \"confirmed\",\n    fill: \"#8884d8\"\n  }), __jsx(Line, {\n    Bar: true,\n    dataKey: \"recovered\",\n    fill: \"#82ca9d\"\n  }), __jsx(Line, {\n    dataKey: \"deaths\",\n    fill: \"#aa0000\"\n  }))))), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Date\"), __jsx(\"th\", null, \"Confirmed\"), __jsx(\"th\", null, \"Deaths\"), __jsx(\"th\", null, \"Recovered\"), __jsx(\"th\", null, \"Suffering\"), __jsx(\"th\", null, \"Mortality Rate\"))), __jsx(\"tbody\", null, countryDataset.map(data => {\n    const {\n      countryName,\n      date,\n      confirmed,\n      deaths,\n      recovered,\n      suffering,\n      mortalityRate\n    } = data;\n    return __jsx(\"tr\", {\n      key: date\n    }, __jsx(\"td\", {\n      title: \"date\"\n    }, date), __jsx(\"td\", {\n      title: \"confirmed\"\n    }, confirmed), __jsx(\"td\", {\n      title: \"deaths\"\n    }, deaths), __jsx(\"td\", {\n      title: \"recovered\"\n    }, recovered), __jsx(\"td\", {\n      title: \"sufferers (approx)\"\n    }, suffering), __jsx(\"td\", {\n      title: \"mortality rate\"\n    }, (mortalityRate * 100).toFixed(2), \"%\"));\n  }))));\n});\nexport async function getStaticPaths(context) {\n  // Return a list of possible value for id\n  try {\n    const res = await axios.get(DATA_URL);\n    const {\n      data\n    } = await res; // console.log('Object.keys(data)', Object.keys(data))\n\n    const paths = Object.keys(data).map(countryName => ({\n      params: {\n        countryName\n      }\n    })); // console.log('paths', paths)\n\n    return {\n      paths,\n      fallback: false\n    };\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n}\nexport async function getStaticProps({\n  params\n}) {\n  // Fetch necessary data for the blog post using params.id\n  const res = await axios.get(DATA_URL);\n  const {\n    data\n  } = await res;\n  const {\n    countryName\n  } = params;\n  const country = data[countryName];\n  const dataset = country.map(entry => addExtraSeriesData(entry, countryName));\n  return {\n    props: {\n      countryDataset: dataset\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}