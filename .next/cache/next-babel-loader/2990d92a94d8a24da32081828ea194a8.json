{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getCountryData = countrySeries => {\n  if (!countrySeries) {\n    return {};\n  }\n\n  const out = {\n    date: null,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    suffering: 0,\n    mortalityrate: 0\n  };\n  countrySeries.forEach((val, i, arr) => {\n    out.date = val.date;\n    out.confirmed += parseInt(val.confirmed);\n    out.recovered += parseInt(val.recovered);\n    out.deaths += parseInt(val.deaths);\n  });\n  out.suffering = out.confirmed - (out.deaths + out.recovered);\n  out.mortalityrate = out.deaths / out.confirmed;\n  return out;\n};\nexport const addExtraSeriesData = (entry, countryName) => {\n  const {\n    confirmed,\n    deaths,\n    recovered\n  } = entry;\n  return _objectSpread({}, entry, {\n    countryName,\n    mortalityRate: deaths === 0 || confirmed === 0 ? 0 : deaths / confirmed,\n    suffering: confirmed - (deaths + recovered)\n  });\n};\nexport const getAggregateData = countryData => {\n  if (countryData == undefined) {\n    return {};\n  }\n\n  const out = {};\n  Object.keys(countryData).forEach(name => {\n    out[name] = getCountryData(countryData[name]);\n  });\n  return out;\n};\nexport const getChartData = dataset => {\n  const keys = Object.keys(dataset);\n  console.log('keys', keys);\n  console.log('dataset', dataset);\n  return keys.map(countryName => {\n    const countryData = dataset[countryName];\n    const lastEntryIndex = countryData.length - 1;\n    return countryData[lastEntryIndex];\n  });\n};\nexport default {\n  getCountryData,\n  getAggregateData,\n  addExtraSeriesData,\n  getChartData\n};","map":null,"metadata":{},"sourceType":"module"}